package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"
	"github.com/xpanvictor/g3_template.git/internal/domain/models/helpers"

	"github.com/xpanvictor/g3_template.git/internal/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user, err := r.UserUseCase.CreateUser(ctx, input.Name, input.Email)
	return helpers.MapDomainUserToGraphQL(user), err
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	t1 := model.Todo{
		ID:   "1",
		Text: "clean",
		Done: false,
		User: nil,
	}
	var ar = []*model.Todo{&t1}
	return ar, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	domainUsers, _ := r.UserUseCase.ListUsers(ctx)

	users := make([]*model.User, len(domainUsers))

	for i, user := range domainUsers {
		users[i] = helpers.MapDomainUserToGraphQL(user)
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
